name: Release Service

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: string
        default: 'Production'
      ServiceRepository:
        description: 'Service Repository'
        type: string
        default: ''

    outputs:
      version_tag:
        description: "Version tag for new Release"
        value: ${{ jobs.Create.outputs.version }}

permissions:
  contents: write

jobs:
  Create:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.available-ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get base version
        id: base-ver
        shell: pwsh
        run: |
          $WeekNum = Get-Date -UFormat "%V"
          $Year = $(Get-Date).ToString("yy")
          [System.Version]"$Year.$WeekNum.0"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "base_version=$Year.$WeekNum"

      - name: Find Patch number
        id: available-ver
        shell: pwsh
        env:
          BASE: ${{ steps.base-ver.outputs.base_version }}
        run: |
          $PatchNum = 0
          do {
              $VersionToCheck = "$($env:BASE).$PatchNum"
              try {
                  $null = Invoke-WebRequest -Headers @{
                      "Accept"               = "application/vnd.github+json"
                      "Authorization"        = "Bearer ${{ secrets.GITHUB_TOKEN }}"
                      "X-GitHub-Api-Version" = "2022-11-28"
                  } -Uri "https://api.github.com/repos/${{ github.repository }}/git/ref/tags/$VersionToCheck"
              }
              catch {
                  if ($_.Exception.StatusCode -eq "404") {
                      break
                  }
                  else {
                      throw $_.Exception.Message
                  }
              }
              $PatchNum++
          } while ($PatchNum -le 1000) 

          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$VersionToCheck"
          
      - name: Create Release
        shell: pwsh
        env:
          VERSION: ${{ steps.available-ver.outputs.version }}
        run: |
          $null = Invoke-RestMethod -Method Post -Headers @{
            "Accept"               = "application/vnd.github+json"
            "Authorization"        = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            "X-GitHub-Api-Version" = "2022-11-28"
          } -Body $(
              @{
                  "tag_name"               = "$($env:VERSION)"
                  "name"                   = "$($env:VERSION) Release"
                  "draft"                  = $false
                  "prerelease"             = $false
                  "generate_release_notes" = $false
              } | ConvertTo-Json
          ) -Uri "https://api.github.com/repos/${{ github.repository }}/releases"
          
      - name: Mark as succeded
        run: |
          echo "### :white_check_mark: Release ${{ steps.available-ver.outputs.version }} created :white_check_mark:" >> $GITHUB_STEP_SUMMARY
  
      - name: Mark as failed
        if: failure()
        run: |
          echo "# :x: Failed to create Release ${{ steps.available-ver.outputs.version }} :x:" >> $GITHUB_STEP_SUMMARY

      - name: Mark as canceled
        if: cancelled()
        run: |
          echo "# :no_entry_sign: Release Creation Canceled :no_entry_sign:" >> $GITHUB_STEP_SUMMARY

  Deploy:
    needs: Create
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Dispatch event
        shell: pwsh
        run: |
          $RepoName = "THD-C/The_THDc_App"
          $WorkflowName = "deploy-service.yml"

          $ServiceName = "${{ inputs.ServiceRepository }}"
          if ($ServiceName.Lenght -le 0){
            return 
          }
          $ServiceName = $ServiceName.Split("/")[1]

          Invoke-RestMethod -Method Post -Headers @{
            "Accept"               = "application/vnd.github+json"
            "Authorization"        = "Bearer ${{ secrets.THDCPL_TOKEN }}"
            "X-GitHub-Api-Version" = "2022-11-28"
          } -Body (
              @{
                  ref = "main"
                  inputs = @{
                    "environment" = "Production"
                    "service" = "$ServiceName"
                  }
              } | ConvertTo-Json
          ) -Uri "https://api.github.com/repos/$RepoName/actions/workflows/$WorkflowName/dispatches"

          Write-Host "https://github.com/$RepoName/actions/workflows/$WorkflowName"
